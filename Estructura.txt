ENEI-2025-ML1-Tarea2/
│
├── README.md
│   # Descripción general del proyecto:
│   # - Integrantes
│   # - Objetivos (Parte A, B, C)
│   # - Cómo ejecutar el notebook
│   # - Resultados principales
│
├── requirements.txt
│   # numpy
│   # pandas
│   # matplotlib
│   # scikit-learn
│   # seaborn (opcional)
│
├── data/
│   ├── README.md                  # Explicamos el origen de los datasets
│   ├── heart_disease.csv          # (opcional si no se descarga vía fetch_openml)
│   └── wine.csv                   # (opcional si no se carga desde sklearn.datasets)
│
├── src/
│   ├── ParteA_Logistic_Binaria.ipynb      # Implementación binaria desde cero + sklearn
│   ├── ParteB_Logistic_OvA.ipynb          # Implementación multiclase uno-vs-all
│   ├── ParteC_Logistic_Softmax.ipynb      # Implementación multinomial (Softmax)
│   │
│   ├── utils/                     # Módulos auxiliares en Python
│   │   ├── preprocessing.py       # Escalado, codificación y división de datos
│   │   ├── logistic_core.py       # Funciones del modelo (gradiente, sigmoid, softmax)
│   │   ├── metrics.py             # accuracy, precision, recall, f1
│   │   └── visualization.py       # gráficos de convergencia, confusión, etc.
│   └── __init__.py
│
├── report/
│   ├── informe_regresion_logistica.md     # Artículo (~600 palabras)
│   └── figuras/
│       ├── curva_convergencia_binaria.png
│       ├── matriz_confusion_ova.png
│       ├── matriz_confusion_softmax.png
│       └── comparacion_coeficientes.png
│
├── notebooks/
│   ├── exploracion_datos.ipynb            # Exploración inicial (EDA)
│   ├── pruebas_lr.ipynb                   # Pruebas con tasas de aprendizaje
│   └── comparacion_modelos.ipynb          # Comparación sklearn vs implementación
│
└── .gitignore
    # Ignorar: __pycache__/, .ipynb_checkpoints/, .DS_Store, etc.
